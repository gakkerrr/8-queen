package main

import (
	"fmt"
	"math/rand"
)

type ChessBoard [8][8]int

var (
	numbersOfQueens      int
	chessBoard           ChessBoard
	unattackedPostitions [8][8]bool
	curNumbersOfQueens   int
)

func main() {

	// –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–µ—Ä–∑–µ–π –Ω–∞ –¥–æ—Å–∫–µ
	numbersOfQueens = 8

	// –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ –∏ –æ–Ω –Ω–µ –ø—Ä–µ—Ä–≤–µ—Ç—Å—è
	for {
		curNumbersOfQueens = 0
		// —Å —Ü–µ–ª—å—é spicy outcome –ø–µ—Ä–≤—ã–π —Ñ–µ—Ä–∑—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ
		setQueenAtRandomCoord(&chessBoard)
		if queens(&chessBoard) {
			printBoard(&chessBoard)
			break
		}
	}
}

func printBoard(board *ChessBoard) {
	for _, row := range board {
		for _, col := range row {
			var printable string
			if col == 2 {
				printable = "üëë"
			} else if col == 1 {
				printable = "üü•"
			} else {
				printable = "‚¨ú"
			}
			fmt.Printf("%v", printable)
		}
		fmt.Println()
	}
	fmt.Println("===============================================================")
}

// –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–Ω–∞—á–∞–ª–∞ –≤—Å—è –¥–æ—Å–∫–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è, –∫—Ä–æ–º–µ —Ñ–µ—Ä–∑–µ–π, –∑–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–µ—Ä–∑—è –Ω–∞ –¥–æ—Å–∫–µ –æ—Ç–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫–∏ –Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –µ–≥–æ –∞—Ç–∞–∫–∏
func checkZonesOfQueen(board *ChessBoard) {

	// –û–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –∫—Ä–æ–º–µ —Ñ–µ—Ä–∑–µ–π
	for rowId, row := range board {
		for colId, col := range row {
			if col != 2 {
				board[rowId][colId] = 0
			}
		}
	}

	for rowId, row := range board {
		for colId, col := range row {
			if col == 2 { // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–µ—Ä–∑—å
				// –ü–æ–º–µ—á–∞–µ–º –∞—Ç–∞–∫—É—é—â–∏–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–µ—Ä–∑—è
				for i := 0; i < 8; i++ {
					// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
					if i != colId {
						board[rowId][i] = 1
					}
					// –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
					if i != rowId {
						board[i][colId] = 1
					}
					// –î–∏–∞–≥–æ–Ω–∞–ª–∏
					if rowId+i < 8 && colId+i < 8 && (i != 0) {
						board[rowId+i][colId+i] = 1
					}
					if rowId-i >= 0 && colId-i >= 0 && (i != 0) {
						board[rowId-i][colId-i] = 1
					}
					if rowId+i < 8 && colId-i >= 0 && (i != 0) {
						board[rowId+i][colId-i] = 1
					}
					if rowId-i >= 0 && colId+i < 8 && (i != 0) {
						board[rowId-i][colId+i] = 1
					}
				}
			}
		}
	}
}

func setQueenAtRandomCoord(board *ChessBoard) {
	randX := rand.Intn(8)
	randY := rand.Intn(8)
	board[randX][randY] = 2
	checkZonesOfQueen(board)
	curNumbersOfQueens++
}

func queens(board *ChessBoard) bool {
	if curNumbersOfQueens == numbersOfQueens {
		return true
	}
	unattackedPostitions = updateUnattackedPostitions(board)

	for rowId, row := range unattackedPostitions {
		for colId, col := range row {
			if col {
				placeQueen(board, rowId, colId)
				checkZonesOfQueen(board)
				unattackedPostitions = updateUnattackedPostitions(board)
				if queens(board) {
					return true
				}
				removeQueen(board, rowId, colId)
				checkZonesOfQueen(board)
				unattackedPostitions = updateUnattackedPostitions(board)
			}
		}
	}
	return false
}

func placeQueen(board *ChessBoard, x, y int) {
	board[x][y] = 2
	curNumbersOfQueens++
}

func removeQueen(board *ChessBoard, x, y int) {
	board[x][y] = 0
	curNumbersOfQueens--
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤—É—Ö–º–µ—Ä–Ω—ã–π –±—É–ª–µ–≤—ã–π –º–∞—Å—Å–∏–≤, –ø–æ–º–µ—á–∞—é—â–∏–π –Ω–µ–∞—Ç–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
func updateUnattackedPostitions(board *ChessBoard) [8][8]bool {
	var unattackedPostitions [8][8]bool
	for rowId, row := range board {
		for colId, col := range row {
			if col == 0 {
				unattackedPostitions[rowId][colId] = true
			}
		}
	}
	return unattackedPostitions
}
